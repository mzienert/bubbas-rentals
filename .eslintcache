[{"/Users/matthew/Documents/Matt/bubbas-rentals/src/App.test.tsx":"1","/Users/matthew/Documents/Matt/bubbas-rentals/src/App.tsx":"2","/Users/matthew/Documents/Matt/bubbas-rentals/src/index.tsx":"3","/Users/matthew/Documents/Matt/bubbas-rentals/src/react-app-env.d.ts":"4","/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/actionTypes.ts":"5","/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/actions.ts":"6","/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/configureStore.ts":"7","/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/enhancers/monitorReducer.ts":"8","/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/middleware/logger.ts":"9","/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/reducers/auth.ts":"10","/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/reducers/index.ts":"11","/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/store.ts":"12","/Users/matthew/Documents/Matt/bubbas-rentals/src/reportWebVitals.ts":"13","/Users/matthew/Documents/Matt/bubbas-rentals/src/setupTests.ts":"14","/Users/matthew/Documents/Matt/bubbas-rentals/src/aws-exports.js":"15","/Users/matthew/Documents/Matt/bubbas-rentals/src/components/Container/index.tsx":"16","/Users/matthew/Documents/Matt/bubbas-rentals/src/components/RentalForm/index.tsx":"17","/Users/matthew/Documents/Matt/bubbas-rentals/src/types/RentalForm.d.ts":"18","/Users/matthew/Documents/Matt/bubbas-rentals/src/constants/RentalForm.ts":"19","/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/reducers/riders.ts":"20"},{"size":273,"mtime":1606064310589,"results":"21","hashOfConfig":"22"},{"size":377,"mtime":1607481155855,"results":"23","hashOfConfig":"22"},{"size":1059,"mtime":1607479784264,"results":"24","hashOfConfig":"22"},{"size":40,"mtime":1606064317871,"results":"25","hashOfConfig":"22"},{"size":265,"mtime":1607491290160,"results":"26","hashOfConfig":"22"},{"size":698,"mtime":1607491779611,"results":"27","hashOfConfig":"22"},{"size":895,"mtime":1606269757969,"results":"28","hashOfConfig":"22"},{"size":601,"mtime":1606099804689,"results":"29","hashOfConfig":"22"},{"size":280,"mtime":1606099838475,"results":"30","hashOfConfig":"22"},{"size":451,"mtime":1606268585670,"results":"31","hashOfConfig":"22"},{"size":146,"mtime":1607491386505,"results":"32","hashOfConfig":"22"},{"size":149,"mtime":1606268794170,"results":"33","hashOfConfig":"22"},{"size":426,"mtime":1606064310590,"results":"34","hashOfConfig":"22"},{"size":241,"mtime":1606064310590,"results":"35","hashOfConfig":"22"},{"size":213,"mtime":1606271922129,"results":"36","hashOfConfig":"22"},{"size":3961,"mtime":1606698463090,"results":"37","hashOfConfig":"22"},{"size":13670,"mtime":1607491779615,"results":"38","hashOfConfig":"22"},{"size":556,"mtime":1607490107406,"results":"39","hashOfConfig":"22"},{"size":3709,"mtime":1607490162987,"results":"40","hashOfConfig":"22"},{"size":413,"mtime":1607493827103,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iqmbp9",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/matthew/Documents/Matt/bubbas-rentals/src/App.test.tsx",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/App.tsx",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/index.tsx",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/react-app-env.d.ts",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/actionTypes.ts",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/actions.ts",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/configureStore.ts",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/enhancers/monitorReducer.ts",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/middleware/logger.ts",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/reducers/auth.ts",["85"],"import { USER_HAS_AUTHENTICATED } from \"../actionTypes\";\n\nconst initialState = {\n    isAuthenticated: false,\n};\n\nexport default function(state = initialState, action: any) {\n    switch (action.type) {\n        case USER_HAS_AUTHENTICATED: {\n            const { isAuthenticated } = action.payload;\n            return {\n                ...state,\n                isAuthenticated\n            };\n        }\n        default:\n            return state;\n    }\n}\n","/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/reducers/index.ts",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/store.ts",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/reportWebVitals.ts",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/setupTests.ts",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/aws-exports.js",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/components/Container/index.tsx",["86","87"],"import React from 'react';\nimport { makeStyles, useTheme, Theme} from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Hidden from '@material-ui/core/Hidden';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { RentalForm } from \"../RentalForm\";\n\nconst drawerWidth = 340;\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        display: 'flex',\n    },\n    drawer: {\n        [theme.breakpoints.up('sm')]: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up('sm')]: {\n            display: 'none',\n        },\n    },\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n        width: drawerWidth\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n    closeMenuButton: {\n        marginRight: 'auto',\n        marginLeft: 0,\n    },\n}));\n\nexport const Container = () => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [mobileOpen, setMobileOpen] = React.useState(false);\n\n    const handleDrawerToggle = () => {\n        setMobileOpen(!mobileOpen);\n    };\n\n    const drawer = (\n        <div>\n            <p>You haven't added any shit to your cart</p>\n        </div>\n    );\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                   {/* <IconButton\n                        color=\"inherit\"\n                        aria-label=\"Open drawer\"\n                        edge=\"start\"\n                        onClick={handleDrawerToggle}\n                        className={classes.menuButton}\n                    >\n                        <MenuIcon />\n                    </IconButton>*/}\n                    <img src=\"./bubbasboards.png\" className=\"App-logo\" alt=\"logo\" />\n                </Toolbar>\n            </AppBar>\n\n            <nav className={classes.drawer}>\n                <Hidden smUp implementation=\"css\">\n                    <Drawer\n                        variant=\"temporary\"\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                        open={mobileOpen}\n                        onClose={handleDrawerToggle}\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                    >\n                        <IconButton onClick={handleDrawerToggle}\n                                    className={classes.closeMenuButton}\n                        >\n                            <CloseIcon/>\n                        </IconButton>\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <Hidden xsDown implementation=\"css\">\n                    <Drawer\n                        className={classes.drawer}\n                        variant=\"permanent\"\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                    >\n                        <div className={classes.toolbar} />\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n            </nav>\n            <div className={classes.content}>\n                <div className={classes.toolbar} />\n                <RentalForm />\n            </div>\n        </div>\n    )\n};\n","/Users/matthew/Documents/Matt/bubbas-rentals/src/components/RentalForm/index.tsx",["88"],"import React from 'react'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FilledInput from '@material-ui/core/FilledInput'\nimport Grid from '@material-ui/core/Grid';\nimport DatePicker from '@material-ui/lab/DatePicker';\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Slider from '@material-ui/core/Slider';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Button from '@material-ui/core/Button';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { abilityLevels, genders, heights, bootSizes, weights } from \"../../constants/RentalForm\";\nimport { FormData } from \"../../types/RentalForm\";\nimport {useDispatch} from \"react-redux\";\nimport {addRider} from \"../../redux/actions\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        paper: {\n            padding: theme.spacing(2),\n            textAlign: 'left',\n            color: theme.palette.text.secondary,\n        },\n        button: {\n            margin: theme.spacing(1),\n        },\n    }),\n);\n\n\n\nexport const RentalForm = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const { register, handleSubmit, errors, control } = useForm<FormData>();\n\n    const [value, setValue] = React.useState<Date | null>(null);\n\n    const onSubmit = (data: FormData) => {\n        dispatch(addRider(data))\n    };\n\n    const valuetext = (value: number) => `${value}lbs`;\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <form onSubmit={handleSubmit((data: FormData) => onSubmit(data))}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Typography variant=\"h5\">\n                                Rider\n                            </Typography>\n                            <Divider />\n                        </Grid>\n                        <Grid item xs={12} md={4}>\n                            <FormControl variant=\"filled\" fullWidth>\n                                <InputLabel htmlFor=\"firstName\">First Name</InputLabel>\n                                <FilledInput\n                                    name=\"firstName\"\n                                    fullWidth\n                                    inputRef={\n                                        register({\n                                            required: 'A first name is required',\n                                            maxLength: {\n                                                value: 50,\n                                                message: 'First name is too long'\n                                            },\n                                            minLength: {\n                                                value: 2,\n                                                message: 'First name is too short'\n                                            }\n                                        })\n                                    }\n                                    error={ errors.firstName ? true : false } />\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} md={4}>\n                            <FormControl variant=\"filled\" fullWidth>\n                                <InputLabel htmlFor=\"lastName\">Last Name</InputLabel>\n                                <FilledInput\n                                    name=\"lastName\"\n                                    fullWidth\n                                    inputRef={\n                                        register({\n                                            required: 'A last name is required',\n                                            maxLength: {\n                                                value: 50,\n                                                message: 'Last name is too long'\n                                            },\n                                            minLength: {\n                                                value: 2,\n                                                message: 'Last name is too short'\n                                            }\n                                        })\n                                    }\n                                    error={ errors.lastName ? true : false } />\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} md={2}>\n                            <DatePicker\n                                disableFuture\n                                openTo=\"year\"\n                                mask=\"dd/MM/yyyy\"\n                                label=\"Date of birth\"\n                                views={[\"year\", \"month\", \"date\"]}\n                                value={value}\n                                onChange={(newValue: any) => setValue(newValue)}\n                                renderInput={(params) =>\n                                    <TextField {...params}\n                                        variant=\"filled\"\n                                        fullWidth\n                                        name=\"birthdate\"\n                                        inputRef={\n                                            register({\n                                                required: 'A birthdate is required',\n                                            })\n                                        }\n                                        error={ errors.birthdate ? true : false }\n                                    />\n                                }/>\n                        </Grid>\n                        <Grid item xs={12} md={2}>\n                            <FormControl\n                                variant=\"filled\"\n                                fullWidth>\n                                <InputLabel htmlFor=\"gender\">gender</InputLabel>\n                                <Controller\n                                    control={control}\n                                    defaultValue=\"\"\n                                    name=\"gender\"\n                                    rules={{ required: 'Gender is required'}}\n                                    as={\n                                        <Select id=\"gender-select\" error={errors?.gender && !!errors.gender.message}>\n                                            {genders.map(gender => (\n                                                <MenuItem value={gender.value}>\n                                                    {gender.display}\n                                                </MenuItem>\n                                            ))}\n                                        </Select>\n                                    }\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Typography variant=\"h5\">\n                                Rider Preferences\n                            </Typography>\n                            <Divider />\n                        </Grid>\n                        <Grid item xs={12} md={2}>\n                            <FormControl variant=\"filled\"\n                                fullWidth>\n                                <InputLabel id=\"ability-label\">Ability</InputLabel>\n                                <Controller\n                                    control={control}\n                                    defaultValue=\"\"\n                                    name=\"ability\"\n                                    rules={{ required: 'Ability is required'}}\n                                    as={\n                                        <Select id=\"ability-select\" error={errors?.ability && !!errors.ability.message}>\n                                            {abilityLevels.map(ability => (\n                                                <MenuItem value={ability.value}>\n                                                    {ability.display}\n                                                </MenuItem>\n                                            ))}\n                                        </Select>\n                                    }\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} md={2}>\n                            <FormControl variant=\"filled\"\n                                         fullWidth>\n                                <InputLabel id=\"height\">Height</InputLabel>\n                                <Controller\n                                    control={control}\n                                    defaultValue=\"\"\n                                    name=\"height\"\n                                    rules={{ required: 'Height is required'}}\n                                    as={\n                                        <Select id=\"height-select\" error={errors?.height && !!errors.height.message}>\n                                            {heights.map(height => (\n                                                <MenuItem value={height.value}>\n                                                    {height.display}\n                                                </MenuItem>\n                                            ))}\n                                        </Select>\n                                    }\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} md={2}>\n                            <FormControl variant=\"filled\"\n                                         fullWidth>\n                                <InputLabel id=\"boot-label\">Boot Size</InputLabel>\n                                <Controller\n                                    control={control}\n                                    defaultValue=\"\"\n                                    name=\"bootSize\"\n                                    rules={{ required: 'Boot size is required'}}\n                                    as={\n                                        <Select id=\"boot-select\" error={errors?.bootSize && !!errors.bootSize.message}>\n                                            {bootSizes.map(bootSize => (\n                                                <MenuItem value={bootSize.value}>\n                                                    {bootSize.display}\n                                                </MenuItem>\n                                            ))}\n                                        </Select>\n                                    }\n                                />\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} md={3}>\n                            <Typography id=\"weight\" gutterBottom>\n                                Weight\n                            </Typography>\n                            <Slider\n                                defaultValue={150}\n                                getAriaValueText={valuetext}\n                                aria-labelledby=\"weight\"\n                                step={5}\n                                marks\n                                min={50}\n                                max={275}\n                                valueLabelDisplay=\"on\"\n                                />\n                        </Grid>\n                        <Grid item xs={12} md={3}>\n                            <FormControl component=\"fieldset\">\n                                <FormLabel component=\"legend\">Stance</FormLabel>\n                                <RadioGroup row aria-label=\"stance\" name=\"stance\" defaultValue=\"regular\">\n                                    <FormControlLabel value=\"regular\" control={<Radio color=\"primary\" />} label=\"Regular\" />\n                                    <FormControlLabel value=\"goofy\" control={<Radio color=\"primary\" />} label=\"Goofy\" />\n                                </RadioGroup>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Divider />\n                            <FormControlLabel\n                                control={<Checkbox />}\n                                label=\"I have read and agree to the rental waiver.\"\n                                name=\"waiver\"\n                                inputRef={register}\n                            />\n\n                            <Button\n                                variant=\"contained\"\n                                className={classes.button}\n                                endIcon={<SaveIcon />}\n                                type=\"submit\"\n                            >\n                                Send\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </form>\n            </Paper>\n        </div>\n    )\n}\n","/Users/matthew/Documents/Matt/bubbas-rentals/src/types/RentalForm.d.ts",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/constants/RentalForm.ts",[],"/Users/matthew/Documents/Matt/bubbas-rentals/src/redux/reducers/riders.ts",["89"],{"ruleId":"90","severity":1,"message":"91","line":7,"column":1,"nodeType":"92","endLine":19,"endColumn":2},{"ruleId":"93","severity":1,"message":"94","line":7,"column":8,"nodeType":"95","messageId":"96","endLine":7,"endColumn":21},{"ruleId":"93","severity":1,"message":"97","line":9,"column":8,"nodeType":"95","messageId":"96","endLine":9,"endColumn":16},{"ruleId":"93","severity":1,"message":"98","line":23,"column":54,"nodeType":"95","messageId":"96","endLine":23,"endColumn":61},{"ruleId":"90","severity":1,"message":"91","line":7,"column":1,"nodeType":"92","endLine":19,"endColumn":2},"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'ExitToAppIcon' is defined but never used.","Identifier","unusedVar","'MenuIcon' is defined but never used.","'weights' is defined but never used."]